{
    "swagger": 2.0,
    "info": {
        "version": "2.1",
        "description": "Under construction",
        "title": "Stores API"
    },
    "host": "api.bigcommerce.com",
    "basePath": "/stores/cl1xfm/v2",
    "schemes": [
        "https"
    ],
    "definitions": {
        "post-object-response": {
        "required": [
            "id",
            "title",
            "url",
            "preview_url",
            "body",
            "tags",
            "summary",
            "is_published",
            "published_date",
            "meta_description",
            "meta_keywords",
            "author",
            "author_url",
            "thumbnail_path"
        ],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique integer value assigned to the blog post",
                    "required": true
                },
                "title": {
                    "type": "string",
                    "description": "The title of the blog post"
                },
                "url": {
                    "type": "string",
                    "description": "The title of the blog post"
                },
                "preview_url": {
                    "type": "string",
                    "description": "The URI of the blog post preview"
                },
                "body": {
                    "type": "string",
                    "description": "The text of the blog post"
                },
                "tags": {
                    "type": "array",
                    "description": "An array containing any tags assigned to the blog post",
                    "items": {
                        "type": "string"
                    }
                },
                "summary": {
                    "type": "string",
                    "description": "The first 312 characters of the body"
                },
                "is_published": {
                    "type": "boolean",
                    "description": "A boolean value indicating whether or not the blog post has been published. If <b>true</b>, the blog post has been published. If <b>false</b>, it remains in draft state (default)"
                },
                "published_date": {
                    "type": "date-time",
                    "description": "The time and date on which the blog post was published in RFC-2822 format"
                },
                "meta_description": {
                    "type": "string",
                    "description": "The meta description of the blog post"
                },
                "meta_keywords": {
                    "type": "string",
                    "description": "Any meta keywords assigned to the blog posts, separated by commas"
                },
                "author": {
                    "type": "string",
                    "description": "The name of the user that authored the post"
                },
                "author_url": {
                    "type": "string",
                    "description": "The URI associated with the author"
                },
                "thumbnail_path": {
                    "type": "string",
                    "description": "The path to the thumbnail image"
                }
            }
        },
        "post-object-request": {
            "required": [
                "title",
                "body"
            ],
            "properties": {
                "title": {
                    "type": "string",
                    "description": "The title of the blog post"
                },
                "url": {
                    "type": "string",
                    "description": "Provides the option to set a custom context path for the blog post. If no value, Bigcommerce will append the title to the base URI"
                },
                "body": {
                    "type": "string",
                    "description": "The text of the blog post"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array containing any tags to be assigned to the blog post"
                },
                "is_published": {
                    "type": "boolean",
                    "description": "Set to <b>true</b> to publish the blog post. Set to <b>false</b> to place it in a draft state (default)"
                },
                "published_date": {
                    "type": "date-time",
                    "description": "The time and date of publication in RFC-2822 format"
                },
                "meta_description": {
                    "type": "string",
                    "description": "The meta description of the blog post"
                },
                "meta_keywords": {
                    "type": "string",
                    "description": "Any meta keywords assigned to the blog posts, separated by commas"
                },
                "author": {
                    "type": "string",
                    "description": "The name of the user that authored the post"
                },
                "author_url": {
                    "type": "string",
                    "description": "The URI associated with the author"
                },
                "thumbnail_path": {
                    "type": "string",
                    "description": "The path to the thumbnail image"
                }
            }
        },
        "tags": {
            "properties": {
                "tag": {
                    "type": "string",
                    "description": "The text of the tag"
                },
                "post_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ID/(s/) of the posts in which the tags appear."
                }
            }
        },
        "customer-object-response": {
            "required": [
                "id",
                "company",
                "first_name",
                "last_name",
                "email",
                "phone",
                "date_created",
                "date_modified",
                "store_credit",
                "registration_ip_address",
                "customer_group_id",
                "notes",
                "addresses"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique integer value assigned to the customer"
                },
                "company": {
                    "type": "string",
                    "description": "The name of the customer's company"
                },
                "first_name": {
                    "type": "string",
                    "description": "The customer's first name"
                },
                "last_name": {
                    "type": "string",
                    "description": "The customer's last name"
                },
                "email": {
                    "type": "string",
                    "description": "The customer's email address"
                },
                "phone": {
                    "type": "string",
                    "description": "The customer's phone number"
                },
                "date_created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When the customer object was created"
                },
                "date_modified": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time and date of the last customer object modification"
                },
                "store_credit": {
                    "type": "float",
                    "description": "The amount of credit the customer has with the store"
                },
                "registration_ip_address": {
                    "type": "string",
                    "description": "The IP address of the customer at the time of registration"
                },
                "customer_group_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The ID of the group the customer belongs to"
                },
                "notes": {
                    "type": "string",
                    "description": "Any notes about the customer"
                },
                "addresses": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "url": {
                                "type": "string",
                                "description": ""
                            },
                            "resource": {
                                "type": "string",
                                "description": ""
                            }
                        }
                    }
                }
            }
        },
        "customer-object-request": {
                "required": [
                    "first_name",
                    "last_name",
                    "email"
                ],
                "properties": {
                    "company": {
                        "type": "string",
                        "description": "The customer's company"
                    },
                    "first_name": {
                        "type": "string",
                        "description": "The first name of the customer"
                    },
                    "last_name": {
                        "type": "string",
                        "description": "The last name of the customer"
                    },
                    "email": {
                        "type": "string",
                        "description": "The customer's email address. Must be unique within the store"
                    },
                    "phone": { 
                        "type": "string",
                        "description": "The customer's phone number"
                    },
                    "store_credit": {
                        "type": "number",
                        "format": "float",
                        "description": "The amount of credit the customer has with the store"
                    },
                    "registration_ip_address": {
                        "type": "string",
                        "description": "The customer's IP address"
                    },
                    "customer_group_id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The ID of the group the customer belongs to"
                    },
                    "notes": {
                        "type": "string",
                        "description": "Any notes about the customer"
                    },
                    "_authentication": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "password": {
                                    "type": "string",
                                    "description": "Use this to set the customer's password. If not provided, Bigcommerce will automatically create a password."
                                },
                                "password_confirmation": {
                                    "type": "string",
                                    "description": "Type the password again, to confirm."
                                }
                            }
                        }
                    }

                }
        },
        "custadd-object-response": {
                "required": [
                    "id",
                    "customer_id",
                    "first_name",
                    "last_name",
                    "company",
                    "street_1",
                    "street_2",
                    "city",
                    "state",
                    "zip",
                    "country",
                    "country_iso2",
                    "phone"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique integer value assigned to the address object"
                    },
                    "customer_id": {
                        "type": "string",
                        "description": "The unique integer value assigned to the enclosing customer object"
                    },
                    "first_name": {
                        "type": "string",
                        "description": "The first name of the addressee"
                    },
                    "last_name": {
                        "type": "string",
                        "description": "The last name of the addressee"
                    },
                    "company": { 
                        "type": "string",
                        "description": "The company of the addressee"
                    },
                    "streeet_1": {
                        "type": "string",
                        "description": "The first line of the street address"
                    },
                    "street_2": {
                        "type": "string",
                        "description": "The second line of the street address"
                    },
                    "city": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The city location"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state location"
                    },
                    "zip": {
                        "type": "string",
                        "description": "The zip code of the location"
                        },
                    "country": {
                        "type": "string",
                        "description": "The country of the location"
                    },
                    "country_iso2": {
                        "type": "string",
                        "description": "The two character ISO 3166-1 alpha-2 country code"
                    },
                    "phone": {
                        "type": "string",
                        "description": "The phone number associated with the addressee"
                    },
                    "address_type": {
                        "type": "string",
                        "description": "Whether the address is <b>commercial</b> or <b>residential</b> (default)"
                    }
                }
        },
        "custadd-object-request": {
                "required": [
                    "first_name",
                    "last_name",
                    "street_1",
                    "city",
                    "state",
                    "zip",
                    "country"
                ],
                "properties": {
                    "customer_id": {
                        "type": "string",
                        "description": "The unique integer value of the customer object associated with this address object"
                    },
                    "first_name": {
                        "type": "string",
                        "description": "The first name of the addressee"
                    },
                    "last_name": {
                        "type": "string",
                        "description": "The last name of the addressee"
                    },
                    "company": { 
                        "type": "string",
                        "description": "The company of the addressee"
                    },
                    "streeet_1": {
                        "type": "string",
                        "description": "The first line of the street address"
                    },
                    "street_2": {
                        "type": "string",
                        "description": "The second line of the street address"
                    },
                    "city": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The city location"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state location"
                    },
                    "zip": {
                        "type": "string",
                        "description": "The zip code of the location"
                        },
                    "country": {
                        "type": "string",
                        "description": "The country of the location"
                    },
                    "phone": {
                        "type": "string",
                        "description": "The phone number associated with the addressee"
                    },

                    "address_type": {
                        "type": "string",
                        "description": "Whether the address is <b>commercial</b> or <b>residential</b>. Defaults to <b>residential</b>"
                    }
                }
        },
        "custgrp-object-response": {
                "required": [
                    "id",
                    "name",
                    "is_default",
                    "category_access",
                    "discount_rules"
                ],
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "The unique integer value assigned to the customer group object"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the customer group. Each customer group has a different name"
                        },
                    "is_default": {
                        "type": "boolean",
                        "description": "If <b>true</b>, new customers are assigned to this group by default. Defaults to <b>false</b>"
                    },
                    "category_access": {
                        "type": "object", 
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "An enum specifying which product categories the customers in the group can access",
                                "enum": [ "ALL", "SPECIFIC", "NONE" ]
                            },
                            "categories": {
                                "type": "array",
                                "description": "If the <b>type</b> enum value is SPECIFIC, this array includes the <b>id</b> values of the product categories the customers in this group can access",
                                "items": {
                                    "type": "string"
                                }       
                            }
                        }
                    },
                    "discount_rules": {
                        "type": "array",
                        "description": "",
                        "items": {
                            "type": "string"
                        }
                    }
                }
        },
        "custgrp-object-request": {
                "required": [
                    "name"
                ],
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "The unique integer value assigned to the customer group object"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the customer group. Each customer group has a different name"
                        },
                    "is_default": {
                        "type": "boolean",
                        "description": "Set to <b>true</b> to make this the default customer group, the one that all new customers will be assigned to by default. Any customer group already set to be the default will get switched to <b>false</b>. Only one customer group can be the default"
                    },
                    "category_access": {
                        "type": "object", 
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "An enum specifying which product categories the customers in the group can access",
                                "enum": [ "ALL", "SPECIFIC", "NONE" ]
                            },
                            "categories": {
                                "type": "array",
                                "description": "If the <b>type</b> enum value is SPECIFIC, this array includes the <b>id</b> values of the product categories the customers in this group can access",
                                "items": {
                                    "type": "string"
                                }       
                            }
                        }
                    },
                    "discount_rules": {
                        "type": "array",
                        "description": "",
                        "items": {
                            "type": "string"
                        }
                    }
                }
        }
    },
    "paths": {
        "/blog/posts": {
            "get": {
                "tags": [
                    "blog"
                ],
                "summary": "List blog posts associated with the store",
                "description": "Returns an array containing either all of the blog post objects associated with the store (up to 250) or just those blog post objects matching your query parameters.",
                "operationId": "getPosts",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "is_published",
                        "description": "To obtain only published posts, set to <b>true</b>. To obtain only posts in draft status, set to <b>false</b>.",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "url",
                        "description": "To obtain posts based on URI.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "tag",
                        "description": "To obtain posts that have a specific tag. Not case sensitive.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "published_date",
                        "description": "To obtain posts published on a specific date.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "To decrease or increase the maximum number of blog post objects returned. By default, the method returns no more than 50. You can increase the maximum up to 250.",
                        "required": false,
                        "type": "integer",
                        "format": "int64",
                        "maximum": 250,
                        "exclusiveMaximum": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Blog post object(s)",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/post-object-response"
                            }
                        }
                    },
                    "401": {
                        "description": "OAuth token missing or incorrect."
                    }
                },
                "security": {
                    "stores_auth": {
                        "scopes": [
                            "write:store_v2_content",
                            "read:store_v2_content_read_only"
                        ]
                    }
                }
            },
            "post": {
                "tags": [
                    "blog"
                ],
                "summary": "Create a blog post",
                "description": "Allows you to create a new blog post.",
                "operationId": "createBlogPost",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Blog post object to add to the store.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/post-object-request"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Indicates success.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/post-object-response"
                            }
                        }
                    },
                    "400": {
                        "description": "Returned if you provide a value for read-only properties: <b>summary</b>, <b>id</b>, or <b>preview_url</b>. Also returned if you fail to provide required values: <b>title</b> or <b>body</b>."
                    }
                    
                },
                "security": {
                    "stores_auth": {
                        "scopes": [
                            "write:store_v2_content",
                            "read:store_v2_content_read_only"
                        ]
                    }
                }
            },
            "delete": {
                "tags": [
                    "blog"
                ],
                "summary": "Delete all blog posts associated with the store",
                "description": "This operation deletes all of the blog posts in the store. Use with caution.",
                "operationId": "deleteBlogPosts",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [ ],
                "responses": {
                    "204": {
                        "description": "Indicates success."
                    },
                    "400": {
                        "description": "Returned if you include a parameter. The method does not support any parameters."
                    }
                },
                "security": {
                    "stores_auth": {
                        "scopes": [
                            "write:store_v2_content",
                            "read:store_v2_content_read_only"
                        ]
                    }
                }
            }
        },
        "/blog/posts/{id}": {
            "get": {
                "tags": [
                    "blog"
                ],
                "summary": "Retrieve a single blog post",
                "description": "Returns the blog post that matches the <b>id</b> value provided in the path.",
                "operationId": "getPost",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [ ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                                "$ref": "#/definitions/post-object-response"
                        }
                    },
                    "406": {
                        "description": "You specified an unsupported media type in the <b>Accept</b> field of the HTTP Header."
                    }
                },
                "security": {
                    "stores_auth": {
                        "scopes": [
                            "write:store_v2_content",
                            "read:store_v2_content_read_only"
                        ]
                    }
                }
            },
            "put": {
                "tags": [
                    "blog"
                ],
                "summary": "Modify writeable values in existing blog post",
                "description": "Allows you to modify any or all of the writeable values in an existing blog post.",
                "operationId": "modifyPost",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Blog post object containing the values to modify.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/post-object-request"
                        }
                    }                    
                ],
                "responses": {
                    "200": {
                        "description": "Indicates success.",
                        "schema": {
                            "$ref": "#/definitions/post-object-response"
                        }
                    },
                    "400": {
                        "description": "Returned if you provide a value for read-only properties: <b>summary</b>, <b>id</b>, or <b>preview_url</b>."
                    }
                },
                "security": {
                    "stores_auth": {
                        "scopes": [
                            "write:store_v2_content",
                            "read:store_v2_content_read_only"
                        ]
                    }
                }
            },
            "delete": {
                "tags": [
                    "blog"
                ],
                "summary": "Delete a single blog post",
                "description": "Deletes the blog post that matches the <b>id</b> value sent in the path.",
                "operationId": "deletePost",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                  
                ],
                "responses": {
                    "204": {
                        "description": "Indicates that the post was successfully deleted."
                    },
                    "400": {
                        "description": "Invalid tag value"
                    }
                },
                "security": {
                    "stores_auth": {
                        "scopes": [
                            "write:store_v2_content",
                            "read:store_v2_content_read_only"
                        ]
                    }
                }
            }            
        },
        "/blog/tags": {
            "get": {
                "tags": [
                    "blog"
                ],
                "summary": "List all blog tags associated with the store",
                "description": "Retrieves an array of all of the blog tags associated with the store, along with the id(s) of the blog posts that contain the tag.",
                "operationId": "getTags",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
      
                ],
                "responses": {
                    "200": {
                        "description": "Indicates success.",
                        "schema": {
                            "$ref": "#/definitions/tags"
                        }
                    },
                    "204": {
                        "description": "Returned if no blog tags exist."
                    },
                    "401": {
                        "description": "OAuth token missing or incorrect."
                    }
                },
                "security": {
                    "stores_auth": {
                        "scopes": [
                            "write:store_v2_content",
                            "read:store_v2_content_read_only"
                        ]
                    }
                }
            }
        },
        "/customer_groups": {
            "get": {
                "tags": [
                    "customers"
                ],        
                "summary": "Retrieve all or some customer groups",
                "description": "Allows you to retrieve all customer groups or to retrieve a single customer group by <b>name</b> value or <b>is_default</b> value.",
                "operationId": "getCustomerGroups",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [ 
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Retrieve the customer group with the specified name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "is_default",
                        "description": "To obtain the group that all new customers get assigned to by default, use <b>true</b>. To obtain only non-default customer groups, use <b>false</b>.",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "To decrease or increase the maximum number of customer group objects returned. By default, the method returns no more than 50. You can increase the maximum up to 250.",
                        "required": false,
                        "type": "integer",
                        "format": "int64",
                        "maximum": 250,
                        "exclusiveMaximum": false
                    }                
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                                "$ref": "#/definitions/custgrp-object-response"
                        }
                    },
                    "406": {
                        "description": "You specified an unsupported media type in the <b>Accept</b> field of the HTTP Header."
                    }
                },
                "security": {
                    "stores_auth": {
                        "scopes": [
                            "write:store_v2_customers",
                            "read:store_v2_customers_read_only"
                        ]
                    }
                }
            },
            "post": {
                "tags": [
                    "customers"
                ],        
                "summary": "Create a customer group",
                "description": "",
                "operationId": "createCustomerGroup",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [ 
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Customer address object",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/custgrp-object-request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                                "$ref": "#/definitions/custgrp-object-response"
                        }
                    },
                    "400": {
                        "description": "Another customer group already has the <b>name</b> value you supplied."
                    },
                    "406": {
                        "description": "You specified an unsupported media type in the <b>Accept</b> field of the HTTP Header."
                    }
                },
                "security": {
                    "stores_auth": {
                        "scopes": [
                            "write:store_v2_customers",
                            "read:store_v2_customers_read_only"
                        ]
                    }
                }
            },
            "delete": {
                "tags": [
                    "customers"
                ],        
                "summary": "Delete one or more customer groups",
                "description": "",
                "operationId": "deleteCustomerGroups",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [ 
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Delete the customer group with the specified name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "is_default",
                        "description": "To delete the group that all new customers get assigned to by default, use <b>true</b>. To delete all other customer groups, use <b>false</b>.",
                        "required": false,
                        "type": "boolean"
                    },                    
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Decrease or increase the maximum number of customer groups deleted. By default, the method deletes no more than 50. You can increase the maximum up to 250.",
                        "required": false,
                        "type": "integer",
                        "format": "int64",
                        "maximum": 250,
                        "exclusiveMaximum": false
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Indicates success"
                    }
                },
                "security": {
                    "stores_auth": {
                        "scopes": [
                            "write:store_v2_customers",
                            "read:store_v2_customers_read_only"
                        ]
                    }
                }
            }            
        },
        "/customer_groups/{id}": {
            "get": {
                "tags": [
                    "customers"
                ],        
                "summary": "Retrieve a single customer group",
                "description": "Returns the customer group object that has the same <b>id</b> value provided in the path.",
                "operationId": "getCustomerGroup",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [ ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                                "$ref": "#/definitions/custgrp-object-response"
                        }
                    },
                    "406": {
                        "description": "You specified an unsupported media type in the <b>Accept</b> field of the HTTP Header."
                    }
                },
                "security": {
                    "stores_auth": {
                        "scopes": [
                            "write:store_v2_customers",
                            "read:store_v2_customers_read_only"
                        ]
                    }
                }
            },
            "put": {
                "tags": [
                    "customers"
                ],
                "summary": "Modify writeable values in a customer group",
                "description": "Allows you to modify any or all of the writeable values in a customer group object.",
                "operationId": "modifyCustomerGroup",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Customer group object containing the values to be modified.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/custgrp-object-request"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returned to indicate success.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/custgrp-object-response"
                            }
                        }
                    },
                    "400": {
                        "description": "Returned if you provide a value for read-only properties: <b>id</b>."
                    }
                    
                },
                "security": {
                    "stores_auth": {
                        "scopes": [
                            "write:store_v2_customers",
                            "read:store_v2_customers_read_only"
                        ]
                    }
                }
            },
            "delete": {
                "tags": [
                    "customers"
                ],
                "summary": "Delete a single customer group",
                "description": "Deletes the customer group object that matches the <b>id</b> value sent in the path.",
                "operationId": "deleteCustomerGroup",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                  
                ],
                "responses": {
                    "204": {
                        "description": "Indicates that the customer group was successfully deleted."
                    }
                },
                "security": {
                    "stores_auth": {
                        "scopes": [
                            "write:store_v2_customers",
                            "read:store_v2_customers_read_only"
                        ]
                    }
                }
            }             
        },
        "/customers": {
            "get": {
                "tags": [
                    "customers"
                ],
                "summary": "List store customers",
                "description": "Returns an array containing either all of the store's customer objects (up to 250) or the customer objects matching your query parameter(s).",
                "operationId": "getCustomers",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
               "parameters": [
                    {
                        "in": "query",
                        "name": "first_name",
                        "description": "Retrieve customer objects with the specified first name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "last_name",
                        "description": "Retrieve customers with the specified last name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "company",
                        "description": "Retrieve customers who work for the specified company.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "description": "Retrieve customers with the specified email address.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "phone",
                        "description": "Retrieve customers with a specified phone number.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "store_credit",
                        "description": "Retrieve customers with the specified amount of store credit.",
                        "required": false,
                        "type": "number",
                        "format": "float"
                    },
                    {
                        "in": "query",
                        "name": "customer_group_id",
                        "description": "Retrieve customers belonging to the specfied group.",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "in": "query",
                        "name": "min_id",
                        "description": "Retrieve customer objects with <b>id</b> values greater than or equal to the specified value.",
                        "required": false,
                        "type": "integer",
                        "format": "int64",
                        "maximum": 250,
                        "exclusiveMaximum": false
                    },
                    {
                        "in": "query",
                        "name": "max_id",
                        "description": "Retrieve customer objects with <b>id</b> values less than or equal to the specified value.",
                        "required": false,
                        "type": "integer",
                        "format": "int64",
                        "maximum": 250,
                        "exclusiveMaximum": false
                    },
                    {
                        "in": "query",
                        "name": "min_date_created",
                        "description": "Retrieve customer objects created after or on the specified date, in RFC-2822 format.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "in": "query",
                        "name": "max_date_created",
                        "description": "Retrieve customer objects created before or on the specified date, using RFC-2822 format.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Decrease or increase the maximum number of customer objects returned. By default, the method returns no more than 50. You can increase the maximum up to 250.",
                        "required": false,
                        "type": "integer",
                        "format": "int64",
                        "maximum": 250,
                        "exclusiveMaximum": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Blog post object(s)",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/customer-object-response"
                            }
                        }
                    },
                    "204": {
                        "description": "No customer objects could be returned because none exist."
                    },
                    "401": {
                        "description": "OAuth token missing or incorrect."
                    }
                },
                "security": {
                    "api_key": {},
                    "stores_auth": {
                        "scopes": [
                            "write:store_v2_customers",
                            "read:store_v2_customers_read_only"
                        ]
                    }
                }
            },
            "post": {
                "tags": [
                    "customers"
                ],
                "summary": "Create a customer",
                "description": "Allows you to create a new customer object.",
                "operationId": "createCustomer",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Blog post object to add to the store.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/customer-object-request"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returned to indicate success.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/customer-object-response"
                            }
                        }
                    },
                    "400": {
                        "description": "Returned if you provide a value for <b>id</b>, <b>date_created</b>, <b>date_modified</b>, or <b>addresses</b>. These are read-only values. Also returned if the store already has a customer with the <b>email</b> address provided."
                    }    
                },
                "security": {
                    "stores_auth": {
                        "scopes": [
                            "write:store_v2_customers",
                            "read:store_v2_customers_read_only"
                        ]
                    }
                }
            },  
            "delete": {
                "tags": [
                    "customers"
                ],
                "summary": "Delete one or more store customers",
                "description": "Use this method to delete all customers in the store or the customer(s) that match your query parameters.",
                "operationId": "deleteCustomers",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
               "parameters": [
                    {
                        "in": "query",
                        "name": "first_name",
                        "description": "Delete all customers with the specified first name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "last_name",
                        "description": "Delete all customers with the specified last name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "company",
                        "description": "Delete all customers from a specific company.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "description": "Delete a customer with a specified email address.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "phone",
                        "description": "Delete the customer(s) with the specified phone number.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "store_credit",
                        "description": "Delete all customer objects with a specified amount of store credit.",
                        "required": false,
                        "type": "number",
                        "format": "float"
                    },
                    {
                        "in": "query",
                        "name": "customer_group_id",
                        "description": "Delete all of the customer objects with a specified <b>customer_group_id</b> value.",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "in": "query",
                        "name": "min_id",
                        "description": "Delete customer objects with <b>id</b> values greater than or equal to the specified value.",
                        "required": false,
                        "type": "integer",
                        "format": "int64",
                        "maximum": 250,
                        "exclusiveMaximum": false
                    },
                    {
                        "in": "query",
                        "name": "max_id",
                        "description": "Delete customer objects with <b>id</b> values less than or equal to the specified value.",
                        "required": false,
                        "type": "integer",
                        "format": "int64",
                        "maximum": 250,
                        "exclusiveMaximum": false
                    },
                    {
                        "in": "query",
                        "name": "min_date_created",
                        "description": "Delete customer objects created after or on the specified date (RFC-2822 format).",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "in": "query",
                        "name": "max_date_created",
                        "description": "Delete customer objects created before or on the specified date (RFC-2822 format).",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Decrease or increase the maximum number of customer objects deleted. By default, the method deletes no more than 50. You can increase the maximum up to 250..",
                        "required": false,
                        "type": "integer",
                        "format": "int64",
                        "maximum": 250,
                        "exclusiveMaximum": false
                    }
                ],
                "responses": {
                      "204": {
                        "description": "Indicates success."
                    },
                    "401": {
                        "description": "OAuth token missing or incorrect."
                    }
                },
                "security": {
                    "api_key": {},
                    "stores_auth": {
                        "scopes": [
                            "write:store_v2_customers",
                            "read:store_v2_customers_read_only"
                        ]
                    }
                }
            }            
        },
        "/customers/{id}": {
            "get": {
                "tags": [
                    "customers"
                ],        
                "summary": "Retrieve a single customer",
                "description": "Returns the customer object that has the same <b>id</b> value provided in the path.",
                "operationId": "getCustomer",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [ ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                                "$ref": "#/definitions/customer-object-response"
                        }
                    },
                    "406": {
                        "description": "You specified an unsupported media type in the <b>Accept</b> field of the HTTP Header."
                    }
                },
                "security": {
                    "stores_auth": {
                        "scopes": [
                            "write:store_v2_customers",
                            "read:store_v2_customers_read_only"
                        ]
                    }
                }
            },
            "put": {
                "tags": [
                    "customers"
                ],
                "summary": "Modify writeable values in a customer",
                "description": "Allows you to modify any or all of the writeable values in a customer object.",
                "operationId": "modifyCustomer",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Customer object containing the values to be modified.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/customer-object-request"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returned to indicate success.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/customer-object-response"
                            }
                        }
                    },
                    "400": {
                        "description": "Returned if you provide a value for read-only properties: <b>id</b>, <b>date_created</b>, <b>date_modified</b>, or <b>addresses</b>."
                    }
                    
                },
                "security": {
                    "stores_auth": {
                        "scopes": [
                            "write:store_v2_customers",
                            "read:store_v2_customers_read_only"
                        ]
                    }
                }
            },
            "delete": {
                "tags": [
                    "customers"
                ],
                "summary": "Delete a single customer",
                "description": "Deletes the customer object that matches the <b>id</b> value sent in the path.",
                "operationId": "deleteCustomer",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                  
                ],
                "responses": {
                    "204": {
                        "description": "Indicates that the customer was successfully deleted."
                    },
                    "400": {
                        "description": "Invalid tag value"
                    }
                },
                "security": {
                    "stores_auth": {
                        "scopes": [
                            "write:store_v2_customers",
                            "read:store_v2_customers_read_only"
                        ]
                    }
                }
            }
        },
        "/customers/{id}/addresses": {
            "get": {
                "tags": [
                    "customers"
                ],        
                "summary": "Retrieve all of the addresses associated with a customer",
                "description": "Returns an array containing all of addresses associated with a specific customer object. Include the <b>id</b> value of the customer object in the path.",
                "operationId": "getCustomerAddresses",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [ 
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "To decrease or increase the maximum number of customer address objects returned. By default, the method returns no more than 50. You can increase the maximum up to 250.",
                        "required": false,
                        "type": "integer",
                        "format": "int64",
                        "maximum": 250,
                        "exclusiveMaximum": false
                    }                
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                                "$ref": "#/definitions/custadd-object-response"
                        }
                    },
                    "406": {
                        "description": "You specified an unsupported media type in the <b>Accept</b> field of the HTTP Header."
                    }
                },
                "security": {
                    "stores_auth": {
                        "scopes": [
                            "write:store_v2_customers",
                            "read:store_v2_customers_read_only"
                        ]
                    }
                }
            },
        
            "post": {
                "tags": [
                    "customers"
                ],        
                "summary": "Create a customer address",
                "description": "Create a customer address object and optionally link it to an associated customer object by including the <b>id</b> of the customer object.",
                "operationId": "createCustomerAddress",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Customer address object",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/custadd-object-request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                                "$ref": "#/definitions/custadd-object-response"
                        }
                    },
                    "406": {
                        "description": "You specified an unsupported media type in the <b>Accept</b> field of the HTTP Header."
                    }
                },
                "security": {
                    "stores_auth": {
                        "scopes": [
                            "write:store_v2_customers",
                            "read:store_v2_customers_read_only"
                        ]
                    }
                }
            },
            "delete": {
                "tags": [
                    "customers"
                ],
                "summary": "Delete all of the addresses associated with a customer",
                "description": "Deletes all of customer addresses associated with the customer. Include the <b>id</b> value of the customer object in the path.",
                "operationId": "deleteCustomerAddresses",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                  
                ],
                "responses": {
                    "204": {
                        "description": "Indicates that the customer addresses were successfully deleted."
                    },
                    "400": {
                        "description": "Invalid tag value"
                    }
                },
                "security": {
                    "stores_auth": {
                        "scopes": [
                            "write:store_v2_customers",
                            "read:store_v2_customers_read_only"
                        ]
                    }
                }
            }        
        },

        "/customers/{id}/addresses/{id}": {
            "get": {
                "tags": [
                    "customers"
                ],        
                "summary": "Retrieve a single customer address",
                "description": "Include the <b>id</b> value of the customer object in the part of the path before <b>addresses</b>. Include the <b>id</b> value of the customer address object in the part of the path after <b>addresses</b>.",
                "operationId": "getCustomerAddress",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [        
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                                "$ref": "#/definitions/custadd-object-response"
                        }
                    },
                    "406": {
                        "description": "You specified an unsupported media type in the <b>Accept</b> field of the HTTP Header."
                    }
                },
                "security": {
                    "stores_auth": {
                        "scopes": [
                            "write:store_v2_customers",
                            "read:store_v2_customers_read_only"
                        ]
                    }
                }
            },
            "put": {
                "tags": [
                    "customers"
                ],        
                "summary": "Modify writeable values in a customer address",
                "description": "Allows you to modify any or all of the writeable values in an existing customer address. Include the <b>id</b> value of the customer object in the part of the path before <b>addresses</b>. Include the <b>id</b> value of the customer address object in the part of the path after <b>addresses</b>.",
                "operationId": "modifyCustomerAddress",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [    
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                                "$ref": "#/definitions/custadd-object-response"
                        }
                    },
                    "406": {
                        "description": "You specified an unsupported media type in the <b>Accept</b> field of the HTTP Header."
                    }
                },
                "security": {
                    "stores_auth": {
                        "scopes": [
                            "write:store_v2_customers",
                            "read:store_v2_customers_read_only"
                        ]
                    }
                }
            },
            "delete": {
                "tags": [
                    "customers"
                ],
                "summary": "Delete one customer address",
                "description": "Include the <b>id</b> value of the customer object in the part of the path before <b>addresses</b>. Include the <b>id</b> value of the customer address object in the part of the path after <b>addresses</b>.",
                "operationId": "deleteCustomerAddress",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                  
                ],
                "responses": {
                    "204": {
                        "description": "Indicates that the customer address was successfully deleted."
                    },
                    "400": {
                        "description": "Invalid tag value"
                    }
                },
                "security": {
                    "stores_auth": {
                        "scopes": [
                            "write:store_v2_customers",
                            "read:store_v2_customers_read_only"
                        ]
                    }
                }
            }        
        }
    },

    "securityDefinition": {
        "api_key": {
            "type": "oauth2",
            "flow": "application"
        },
        "stores_auth": {
            "type": "oauth2",
            "scopes": [
                {
                    "name": "read:store_v2",
                    "description": "read your pets"
                }
            ]
        }
    }
}