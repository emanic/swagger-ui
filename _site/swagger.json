{
    "swagger": 2.0,
    "info": {
        "version": "2.1",
        "description": "Under construction",
        "title": "Stores API"

    },
    "host": "api.bigcommerce.com",
    "basePath": "/stores/{store_hash}/v2",
    "schemes": [
        "https"
    ],
    "definitions": {
        "postReturned": {
            "required": [
                "title",
                "body"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "READ-ONLY. A unique integer value assigned to each blog post.",
                    "required": true
                },
                "title": {
                    "type": "string",
                    "description": "The title of the blog post"
                },
                "url": {
                    "type": "string",
                    "description": "Provides the option to set a custom context path for the blog post. If no value, Bigcommerce will use the title as the context path."
                },
                "preview_url": {
                    "type": "string",
                    "description": "READ ONLY. The URI of the preview of the blog post."
                },
                "body": {
                    "type": "string",
                    "description": "The text of the blog post."
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array containing any tags assigned to the blog post."
                },
                "summary": {
                    "type": "string",
                    "description": "READ- ONLY. The first 312 characters of the body text with a hyperlinked ellipsis."
                },
                "is_published": {
                    "type": "boolean",
                    "description": "A boolean value indicating whether or not the blog post has been published. If true, the blog post has been published. If false, it remains in draft state /(default/)."
                },
                "published_date": {
                    "type": "date-time",
                    "description": "The time and date on which the blog post was published in RFC-2822 format."
                },
                "meta_description": {
                    "type": "string",
                    "description": "The meta description of the blog post."
                },
                "meta_keywords": {
                    "type": "string",
                    "description": "Any meta keywords assigned to the blog posts, separated by commas."
                },
                "author": {
                    "type": "string",
                    "description": "The name of the user that authored the post."
                },
                "author_url": {
                    "type": "string",
                    "description": "The URI associated with the author."
                },
                "thumbnail_path": {
                    "type": "string",
                    "description": "The path to the thumbnail image."
                }
            }
        },
        "postSent": {
            "required": [
                "title",
                "body"
            ],
            "properties": {
                "title": {
                    "type": "string",
                    "description": "The title of the blog post"
                },
                "url": {
                    "type": "string",
                    "description": "Provides the option to set a custom context path for the blog post. If no value, Bigcommerce will use the title as the context path."
                },
                "body": {
                    "type": "string",
                    "description": "The text of the blog post."
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array containing any tags assigned to the blog post."
                },
                "is_published": {
                    "type": "boolean",
                    "description": "A boolean value indicating whether or not the blog post has been published. If true, the blog post has been published. If false, it remains in draft state /(default/)."
                },
                "published_date": {
                    "type": "date-time",
                    "description": "The time and date on which the blog post was published in RFC-2822 format."
                },
                "meta_description": {
                    "type": "string",
                    "description": "The meta description of the blog post."
                },
                "meta_keywords": {
                    "type": "string",
                    "description": "Any meta keywords assigned to the blog posts, separated by commas."
                },
                "author": {
                    "type": "string",
                    "description": "The name of the user that authored the post."
                },
                "author_url": {
                    "type": "string",
                    "description": "The URI associated with the author."
                },
                "thumbnail_path": {
                    "type": "string",
                    "description": "The path to the thumbnail image."
                }
            }
        },
        "tags": {
            "properties": {
                "tag": {
                    "type": "string",
                    "description": "The text of the tag."
                },
                "post_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ID/(s/) of the posts in which the tags appear."
                }
            }
        },
        "User": {
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "username": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "userStatus": {
                    "type": "integer",
                    "format": "int32",
                    "description": "User Status"
                }
            }
        },
        "Category": {
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "Pet": {
            "enum": [
                "name",
                "photoUrls"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "category": {
                    "$ref": "Category"
                },
                "name": {
                    "type": "string",
                    "example": "doggie"
                },
                "photoUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "Tag"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "pet status in the store"
                }
            }
        },
        "Tag": {
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "Order": {
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "petId": {
                    "type": "integer",
                    "format": "int64"
                },
                "quantity": {
                    "type": "integer",
                    "format": "int32"
                },
                "shipDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "status": {
                    "type": "string",
                    "description": "Order Status"
                },
                "complete": {
                    "type": "boolean"
                }
            }
        }
    },
    "paths": {
        "/posts": {
            "get": {
                "tags": [
                    "blog"
                ],
                "summary": "List blog posts associated with the store",
                "description": "",
                "operationId": "getPosts",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "is_published",
                        "description": "Post in published or draft status",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "url",
                        "description": "Post matching a specific URI",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "tag",
                        "description": "Posts matching tag",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "published_date",
                        "description": "Posts published on a specific date",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "Number of pages",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Use this parameter to decrease or increase the maximum number of posts returned. By default, the method returns no more than 50. You can increase the maximum up to 250.",
                        "required": false,
                        "type": "integer",
                        "format": "int64",
                        "maximum": 250,
                        "exclusiveMaximum": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Blog post object/(s/)",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/postReturned"
                            }
                        }
                    },
                    "401": {
                        "description": "OAuth token missing or incorrect."
                    }
                },
                "security": {
                    "petstore_auth": {
                        "scopes": [
                            "write:store_v2_content",
                            "read:store_v2_content_read_only"
                        ]
                    }
                }
            },
            "post": {
                "tags": [
                    "blog"
                ],
                "summary": "Create a blog post",
                "description": "",
                "operationId": "createBlogPost",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Blog post object to add to the store.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/postSent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returned to indicate success."
                    },
                    "400": {
                        "description": "Returned if you provide a value for summary, id, or preview_url. These are read-only values."
                    }
                    
                },
                "security": {
                    "petstore_auth": {
                        "scopes": [
                            "write:store_v2_content",
                            "read:store_v2_content_read_only"
                        ]
                    }
                }
            },
            "delete": {
                "tags": [
                    "blog"
                ],
                "summary": "Delete all blog posts associated with the store",
                "description": "",
                "operationId": "deleteBlogPosts",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [ ],
                "responses": {
                    "204": {
                        "description": "Returned if the operation succeeded."
                    },
                    "400": {
                        "description": "Returned if you include an unsupported query parameter."
                    }
                },
                "security": {
                    "petstore_auth": {
                        "scopes": [
                            "write:store_v2_content",
                            "read:store_v2_content_read_only"
                        ]
                    }
                }
            }
        },
        "/posts/{id}": {
            "get": {
                "tags": [
                    "blog"
                ],
                "summary": "Retrieve a single blog post",
                "description": "",
                "operationId": "getPost",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [ ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                                "$ref": "#/definitions/postReturned"
                        }
                    },
                    "401": {
                        "description": "You did not include Content-Type in the HTTP Header."
                    }
                },
                "security": {
                    "petstore_auth": {
                        "scopes": [
                            "write:store_v2_content",
                            "read:store_v2_content_read_only"
                        ]
                    }
                }
            },
            "put": {
                "tags": [
                    "blog"
                ],
                "summary": "Modify writeable values in existing blog post",
                "description": "",
                "operationId": "modifyPost",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Blog post object containing the values to modify.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/postSent"
                        }
                    }                    
                ],
                "responses": {
                    "200": {
                        "description": "Indicates success.",
                        "schema": {
                            "$ref": "#/definitions/postReturned"
                        }
                    },
                    "400": {
                        "description": "Invalid tag value"
                    }
                },
                "security": {
                    "petstore_auth": {
                        "scopes": [
                            "write:store_v2_content",
                            "read:store_v2_content_read_only"
                        ]
                    }
                }
            },
            "delete": {
                "tags": [
                    "blog"
                ],
                "summary": "Delete a single blog post",
                "description": "",
                "operationId": "deletePost",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                  
                ],
                "responses": {
                    "204": {
                        "description": "Indicates that the post was successfully deleted."
                    },
                    "400": {
                        "description": "Invalid tag value"
                    }
                },
                "security": {
                    "petstore_auth": {
                        "scopes": [
                            "write:store_v2_content",
                            "read:store_v2_content_read_only"
                        ]
                    }
                }
            }            
        },
        "/tags": {
            "get": {
                "tags": [
                    "blog"
                ],
                "summary": "List all blog tags associated with the store",
                "description": "",
                "operationId": "getTags",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
      
                ],
                "responses": {
                    "200": {
                        "description": "Indicates success.",
                        "schema": {
                            "$ref": "#/definitions/tags"
                        }
                    },
                    "204": {
                        "description": "Returned if no blog tags exist."
                    },
                    "401": {
                        "description": "OAuth token missing or incorrect."
                    }
                },
                "security": {
                    "petstore_auth": {
                        "scopes": [
                            "write:store_v2_content",
                            "read:store_v2_content_read_only"
                        ]
                    }
                }
            }
        },
        "/pet/{petId}": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Find pet by ID",
                "description": "Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions",
                "operationId": "getPetById",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "petId",
                        "description": "ID of pet that needs to be fetched",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    }
                },
                "security": {
                    "api_key": {},
                    "petstore_auth": {
                        "scopes": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                }
            },
            "delete": {
                "tags": [
                    "pet"
                ],
                "summary": "Deletes a pet",
                "description": "",
                "operationId": "deletePet",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "petId",
                        "description": "Pet id to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid pet value"
                    }
                },
                "security": {
                    "petstore_auth": {
                        "scopes": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                }
            }
        },
        "/store/order": {
            "post": {
                "tags": [
                    "store"
                ],
                "summary": "Place an order for a pet",
                "description": "",
                "operationId": "placeOrder",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "order placed for purchasing the pet",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    },
                    "400": {
                        "description": "Invalid Order"
                    }
                }
            }
        },
        "/store/order/{orderId}": {
            "get": {
                "tags": [
                    "store"
                ],
                "summary": "Find purchase order by ID",
                "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
                "operationId": "getOrderById",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orderId",
                        "description": "ID of pet that needs to be fetched",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "store"
                ],
                "summary": "Delete purchase order by ID",
                "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
                "operationId": "deleteOrder",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orderId",
                        "description": "ID of the order that needs to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/user": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Create user",
                "description": "This can only be done by the logged in user.",
                "operationId": "createUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Created user object",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/user/createWithArray": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Creates list of users with given input array",
                "description": "",
                "operationId": "createUsersWithArrayInput",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "List of user object",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "User"
                            }
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/user/createWithList": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Creates list of users with given input array",
                "description": "",
                "operationId": "createUsersWithListInput",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "List of user object",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/user/login": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Logs user into the system",
                "description": "",
                "operationId": "loginUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "username",
                        "description": "The user name for login",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "password",
                        "description": "The password for login in clear text",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid username/password supplied"
                    }
                }
            }
        },
        "/user/logout": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Logs out current logged in user session",
                "description": "",
                "operationId": "logoutUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/user/{username}": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Get user by user name",
                "description": "",
                "operationId": "getUserByName",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "username",
                        "description": "The name that needs to be fetched. Use user1 for testing. ",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "user"
                ],
                "summary": "Updated user",
                "description": "This can only be done by the logged in user.",
                "operationId": "updateUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "username",
                        "description": "name that need to be deleted",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Updated user object",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid user supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "user"
                ],
                "summary": "Delete user",
                "description": "This can only be done by the logged in user.",
                "operationId": "deleteUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "username",
                        "description": "The name that needs to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        }
    },
    "securityDefinition": {
        "api_key": {
            "type": "api_key"
        },
        "petstore_auth": {
            "type": "oauth2",
            "scopes": [
                {
                    "name": "read:pets",
                    "description": "read your pets"
                }
            ]
        }
    }
}