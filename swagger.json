{
    "swagger": 2.0,
    "info": {
        "version": "2.1",
        "description": "Under construction",
        "title": "Stores API"

    },
    "host": "api.bigcommerce.com",
    "basePath": "/stores/{store_hash}/v2",
    "schemes": [
        "https"
    ],
    "definitions": {
        "post-object-response": {
        "required": [
            "id",
            "title",
            "url",
            "preview_url",
            "body",
            "tags",
            "summary",
            "is_published",
            "published_date",
            "meta_description",
            "meta_keywords",
            "author",
            "author_url",
            "thumbnail_path"
        ],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique integer value assigned to the blog post",
                    "required": true
                },
                "title": {
                    "type": "string",
                    "description": "The title of the blog post"
                },
                "url": {
                    "type": "string",
                    "description": "The title of the blog post"
                },
                "preview_url": {
                    "type": "string",
                    "description": "The URI of the blog post preview"
                },
                "body": {
                    "type": "string",
                    "description": "The text of the blog post"
                },
                "tags": {
                    "type": "array",
                    "description": "An array containing any tags assigned to the blog post",
                    "items": {
                        "type": "string"
                    }
                },
                "summary": {
                    "type": "string",
                    "description": "The first 312 characters of the body"
                },
                "is_published": {
                    "type": "boolean",
                    "description": "A boolean value indicating whether or not the blog post has been published. If true, the blog post has been published. If false, it remains in draft state (default)"
                },
                "published_date": {
                    "type": "date-time",
                    "description": "The time and date on which the blog post was published in RFC-2822 format"
                },
                "meta_description": {
                    "type": "string",
                    "description": "The meta description of the blog post"
                },
                "meta_keywords": {
                    "type": "string",
                    "description": "Any meta keywords assigned to the blog posts, separated by commas"
                },
                "author": {
                    "type": "string",
                    "description": "The name of the user that authored the post"
                },
                "author_url": {
                    "type": "string",
                    "description": "The URI associated with the author"
                },
                "thumbnail_path": {
                    "type": "string",
                    "description": "The path to the thumbnail image"
                }
            }
        },
        "post-object-request": {
            "required": [
                "title",
                "body"
            ],
            "properties": {
                "title": {
                    "type": "string",
                    "description": "The title of the blog post"
                },
                "url": {
                    "type": "string",
                    "description": "Provides the option to set a custom context path for the blog post. If no value, Bigcommerce will append the title to the base URI"
                },
                "body": {
                    "type": "string",
                    "description": "The text of the blog post"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array containing any tags to be assigned to the blog post"
                },
                "is_published": {
                    "type": "boolean",
                    "description": "Set to <b>true</b> to publish the blog post. Set to <b>false</b> to place it in a draft state (default)"
                },
                "published_date": {
                    "type": "date-time",
                    "description": "The time and date of publication in RFC-2822 format"
                },
                "meta_description": {
                    "type": "string",
                    "description": "The meta description of the blog post"
                },
                "meta_keywords": {
                    "type": "string",
                    "description": "Any meta keywords assigned to the blog posts, separated by commas"
                },
                "author": {
                    "type": "string",
                    "description": "The name of the user that authored the post"
                },
                "author_url": {
                    "type": "string",
                    "description": "The URI associated with the author"
                },
                "thumbnail_path": {
                    "type": "string",
                    "description": "The path to the thumbnail image"
                }
            }
        },
        "tags": {
            "properties": {
                "tag": {
                    "type": "string",
                    "description": "The text of the tag"
                },
                "post_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ID/(s/) of the posts in which the tags appear."
                }
            }
        },
        "customer-object-response": {
            "required": [
                "id",
                "company",
                "first_name",
                "last_name",
                "email",
                "phone",
                "date_created",
                "date_modified",
                "store_credit",
                "registration_ip_address",
                "customer_group_id",
                "notes",
                "addresses"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique integer value assigned to the customer"
                },
                "company": {
                    "type": "string",
                    "description": "The name of the customer's company"
                },
                "first_name": {
                    "type": "string",
                    "description": "The customer's first name"
                },
                "last_name": {
                    "type": "string",
                    "description": "The customer's last name"
                },
                "email": {
                    "type": "string",
                    "description": "The customer's email address"
                },
                "phone": {
                    "type": "string",
                    "description": "The customer's phone number"
                },
                "date_created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When the customer record was created"
                },
                "date_modified": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time and date of the last customer record modification"
                },
                "store_credit": {
                    "type": "float",
                    "description": "The amount of credit the customer has with the store"
                },
                "registration_ip_address": {
                    "type": "string",
                    "description": "The IP address of the customer at the time of registration"
                },
                "customer_group_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The ID of the group the customer belongs to"
                },
                "notes": {
                    "type": "string",
                    "description": "Any notes about the customer"
                },
                "addresses": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "url": {
                                "type": "string",
                                "description": ""
                            },
                            "resource": {
                                "type": "string",
                                "description": ""
                            }
                        }
                    }
                }
            }
        },
        "customer-object-request": {
                "required": [
                    "first_name",
                    "last_name",
                    "email"
                ],
                "properties": {
                    "company": {
                        "type": "string",
                        "description": "The customer's company"
                    },
                    "first_name": {
                        "type": "string",
                        "description": "The first name of the customer"
                    },
                    "last_name": {
                        "type": "string",
                        "description": "The last name of the customer"
                    },
                    "email": {
                        "type": "string",
                        "description": "The customer's email address. Must be unique within the store."
                    },
                    "phone": { 
                        "type": "string",
                        "description": "The customer's phone number"
                    },
                    "store_credit": {
                        "type": "number",
                        "format": "float",
                        "description": "The amount of credit the customer has with the store"
                    },
                    "registration_ip_address": {
                        "type": "string",
                        "description": "The customer's IP address"
                    },
                    "customer_group_id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The ID of the group the customer belongs to"
                    },
                    "notes": {
                        "type": "string",
                        "description": "Any notes about the customer"
                    },
                    "_authentication": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "password": {
                                    "type": "string",
                                    "description": "Use this to set the customer's password. If not provided, Bigcommerce will automatically create a password."
                                },
                                "password_confirmation": {
                                    "type": "string",
                                    "description": "Type the password again, to confirm."
                                }
                            }
                        }
                    }

                }
        },
        "User": {
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "username": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "userStatus": {
                    "type": "integer",
                    "format": "int32",
                    "description": "User Status"
                }
            }
        },
        "Category": {
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "Pet": {
            "enum": [
                "name",
                "photoUrls"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "category": {
                    "$ref": "Category"
                },
                "name": {
                    "type": "string",
                    "example": "doggie"
                },
                "photoUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "Tag"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "pet status in the store"
                }
            }
        },
        "Tag": {
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "Order": {
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "petId": {
                    "type": "integer",
                    "format": "int64"
                },
                "quantity": {
                    "type": "integer",
                    "format": "int32"
                },
                "shipDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "status": {
                    "type": "string",
                    "description": "Order Status"
                },
                "complete": {
                    "type": "boolean"
                }
            }
        }
    },
    "paths": {
        "/blog/posts": {
            "get": {
                "tags": [
                    "blog"
                ],
                "summary": "List blog posts associated with the store",
                "description": "Returns an array containing either all of the blog posts associated with the store (up to 250) or just those blog posts matching your query parameters.",
                "operationId": "getPosts",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "is_published",
                        "description": "To obtain only posts that are in a published status, set to <b>true</b>. To obtain only posts that are in draft status, set to <b>false</b>.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "url",
                        "description": "To obtain posts based on URI",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "tag",
                        "description": "To obtain posts that have a specific tag",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "published_date",
                        "description": "To obtain posts published on a specific date",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "Number of pages",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "To decrease or increase the maximum number of posts returned. By default, the method returns no more than 50. You can increase the maximum up to 250.",
                        "required": false,
                        "type": "integer",
                        "format": "int64",
                        "maximum": 250,
                        "exclusiveMaximum": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Blog post object(s)",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/post-object-response"
                            }
                        }
                    },
                    "401": {
                        "description": "OAuth token missing or incorrect."
                    }
                },
                "security": {
                    "petstore_auth": {
                        "scopes": [
                            "write:store_v2_content",
                            "read:store_v2_content_read_only"
                        ]
                    }
                }
            },
            "post": {
                "tags": [
                    "blog"
                ],
                "summary": "Create a blog post",
                "description": "Allows you to create a new blog post.",
                "operationId": "createBlogPost",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Blog post object to add to the store.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/post-object-request"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returned to indicate success.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/post-object-response"
                            }
                        }
                    },
                    "400": {
                        "description": "Returned if you provide a value for <b>summary</b>, <b>id</b>, or <b>preview_url</b>. These are read-only values."
                    }
                    
                },
                "security": {
                    "petstore_auth": {
                        "scopes": [
                            "write:store_v2_content",
                            "read:store_v2_content_read_only"
                        ]
                    }
                }
            },
            "delete": {
                "tags": [
                    "blog"
                ],
                "summary": "Delete all blog posts associated with the store",
                "description": "This operation deletes all of the blog posts in the store. Use with caution.",
                "operationId": "deleteBlogPosts",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [ ],
                "responses": {
                    "204": {
                        "description": "Returned if the operation succeeded."
                    },
                    "400": {
                        "description": "Returned if you include an unsupported query parameter."
                    }
                },
                "security": {
                    "petstore_auth": {
                        "scopes": [
                            "write:store_v2_content",
                            "read:store_v2_content_read_only"
                        ]
                    }
                }
            }
        },
        "/blog/posts/{id}": {
            "get": {
                "tags": [
                    "blog"
                ],
                "summary": "Retrieve a single blog post",
                "description": "Returns the blog post that matches the id provided in the path.",
                "operationId": "getPost",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [ ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                                "$ref": "#/definitions/post-object-response"
                        }
                    },
                    "401": {
                        "description": "You did not include Content-Type in the HTTP Header."
                    }
                },
                "security": {
                    "petstore_auth": {
                        "scopes": [
                            "write:store_v2_content",
                            "read:store_v2_content_read_only"
                        ]
                    }
                }
            },
            "put": {
                "tags": [
                    "blog"
                ],
                "summary": "Modify writeable values in existing blog post",
                "description": "Allows you to modify any of the writeable values of an existing blog post.",
                "operationId": "modifyPost",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Blog post object containing the values to modify.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/post-object-request"
                        }
                    }                    
                ],
                "responses": {
                    "200": {
                        "description": "Indicates success.",
                        "schema": {
                            "$ref": "#/definitions/post-object-response"
                        }
                    },
                    "400": {
                        "description": "Returned if you provide a value for <b>summary</b>, <b>id</b>, or <b>preview_url</b>. These are read-only values."
                    }
                },
                "security": {
                    "petstore_auth": {
                        "scopes": [
                            "write:store_v2_content",
                            "read:store_v2_content_read_only"
                        ]
                    }
                }
            },
            "delete": {
                "tags": [
                    "blog"
                ],
                "summary": "Delete a single blog post",
                "description": "Deletes the blog post that matches the id sent in the path.",
                "operationId": "deletePost",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                  
                ],
                "responses": {
                    "204": {
                        "description": "Indicates that the post was successfully deleted."
                    },
                    "400": {
                        "description": "Invalid tag value"
                    }
                },
                "security": {
                    "petstore_auth": {
                        "scopes": [
                            "write:store_v2_content",
                            "read:store_v2_content_read_only"
                        ]
                    }
                }
            }            
        },
        "/blog/tags": {
            "get": {
                "tags": [
                    "blog"
                ],
                "summary": "List all blog tags associated with the store",
                "description": "Retrieves an array of all of the blog tags associated with the store, along with the id(s) of the blog posts that contain the tag.",
                "operationId": "getTags",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
      
                ],
                "responses": {
                    "200": {
                        "description": "Indicates success.",
                        "schema": {
                            "$ref": "#/definitions/tags"
                        }
                    },
                    "204": {
                        "description": "Returned if no blog tags exist."
                    },
                    "401": {
                        "description": "OAuth token missing or incorrect."
                    }
                },
                "security": {
                    "petstore_auth": {
                        "scopes": [
                            "write:store_v2_content",
                            "read:store_v2_content_read_only"
                        ]
                    }
                }
            }
        },
        "/customers": {
            "get": {
                "tags": [
                    "customers"
                ],
                "summary": "List store customers",
                "description": "Returns an array containing either all of the store's customer objects (up to 250) or the customer objects matching your query parameter(s).",
                "operationId": "getCustomers",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
               "parameters": [
                    {
                        "in": "query",
                        "name": "first_name",
                        "description": "To retrieve customers with the specified first name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "last_name",
                        "description": "To retrieve customers with the specified last name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "company",
                        "description": "To retrieve customers who work for the specified company",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "description": "To retrieve customers with the specified email address",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "phone",
                        "description": "To retrieve customers with a specified phone number",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "store_credit",
                        "description": "To retrieve customers with the specified amount of store credit",
                        "required": false,
                        "type": "number",
                        "format": "float"
                    },
                    {
                        "in": "query",
                        "name": "customer_group_id",
                        "description": "To retrieve customers belonging to the specfied group",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "in": "query",
                        "name": "min_id",
                        "description": "To retrieve only customer records with ID values greater than the specified value",
                        "required": false,
                        "type": "integer",
                        "format": "int64",
                        "maximum": 250,
                        "exclusiveMaximum": false
                    },
                    {
                        "in": "query",
                        "name": "max_id",
                        "description": "To retrieve only customer records with ID values less than the specified value",
                        "required": false,
                        "type": "integer",
                        "format": "int64",
                        "maximum": 250,
                        "exclusiveMaximum": false
                    },
                    {
                        "in": "query",
                        "name": "min_date_created",
                        "description": "To retrieve customer records created after the specified date",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "in": "query",
                        "name": "max_date_created",
                        "description": "To retrieve customer records created before the specified date",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "description": "???",
                        "required": false,
                        "type": "integer",
                        "format": "int64",
                        "maximum": 250,
                        "exclusiveMaximum": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "To decrease or increase the maximum number of customer objects returned. By default, the method returns no more than 50. You can increase the maximum up to 250.",
                        "required": false,
                        "type": "integer",
                        "format": "int64",
                        "maximum": 250,
                        "exclusiveMaximum": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Blog post object(s)",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/customer-object-response"
                            }
                        }
                    },
                    "204": {
                        "description": "No customer records exist."
                    },
                    "401": {
                        "description": "OAuth token missing or incorrect."
                    }
                },
                "security": {
                    "api_key": {},
                    "petstore_auth": {
                        "scopes": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                }
            },
            "post": {
                "tags": [
                    "customers"
                ],
                "summary": "Create a customer record",
                "description": "Allows you to create a new customer record.",
                "operationId": "createBlogPost",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Blog post object to add to the store.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/customer-object-request"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returned to indicate success.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/customer-object-response"
                            }
                        }
                    },
                    "400": {
                        "description": "Returned if you provide a value for <b>id</b>, <b>date_created</b>, <b>date_modified</b>, or <b>addresses</b>. These are read-only values. Also returned if the store already has a customer with the <b>email</b> address provided."
                    }
                    
                },
                "security": {
                    "petstore_auth": {
                        "scopes": [
                            "write:store_v2_content",
                            "read:store_v2_content_read_only"
                        ]
                    }
                }
            },      
            
            
            
            "delete": {
                "tags": [
                    "pet"
                ],
                "summary": "Deletes a pet",
                "description": "",
                "operationId": "deletePet",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "petId",
                        "description": "Pet id to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid pet value"
                    }
                },
                "security": {
                    "petstore_auth": {
                        "scopes": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                }
            }
        },
        "/store/order": {
            "post": {
                "tags": [
                    "store"
                ],
                "summary": "Place an order for a pet",
                "description": "",
                "operationId": "placeOrder",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "order placed for purchasing the pet",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    },
                    "400": {
                        "description": "Invalid Order"
                    }
                }
            }
        },
        "/store/order/{orderId}": {
            "get": {
                "tags": [
                    "store"
                ],
                "summary": "Find purchase order by ID",
                "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
                "operationId": "getOrderById",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orderId",
                        "description": "ID of pet that needs to be fetched",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "store"
                ],
                "summary": "Delete purchase order by ID",
                "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
                "operationId": "deleteOrder",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orderId",
                        "description": "ID of the order that needs to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/user": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Create user",
                "description": "This can only be done by the logged in user.",
                "operationId": "createUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Created user object",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/user/createWithArray": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Creates list of users with given input array",
                "description": "",
                "operationId": "createUsersWithArrayInput",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "List of user object",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "User"
                            }
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/user/createWithList": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Creates list of users with given input array",
                "description": "",
                "operationId": "createUsersWithListInput",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "List of user object",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/user/login": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Logs user into the system",
                "description": "",
                "operationId": "loginUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "username",
                        "description": "The user name for login",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "password",
                        "description": "The password for login in clear text",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid username/password supplied"
                    }
                }
            }
        },
        "/user/logout": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Logs out current logged in user session",
                "description": "",
                "operationId": "logoutUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/user/{username}": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Get user by user name",
                "description": "",
                "operationId": "getUserByName",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "username",
                        "description": "The name that needs to be fetched. Use user1 for testing. ",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "user"
                ],
                "summary": "Updated user",
                "description": "This can only be done by the logged in user.",
                "operationId": "updateUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "username",
                        "description": "name that need to be deleted",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Updated user object",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid user supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "user"
                ],
                "summary": "Delete user",
                "description": "This can only be done by the logged in user.",
                "operationId": "deleteUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "username",
                        "description": "The name that needs to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        }
    },
    "securityDefinition": {
        "api_key": {
            "type": "api_key"
        },
        "petstore_auth": {
            "type": "oauth2",
            "scopes": [
                {
                    "name": "read:pets",
                    "description": "read your pets"
                }
            ]
        }
    }
}